<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>JSON to Objective-C Generator</title>
    <style>
        body {
            font-family: 'Arial', sans-serif;
            margin: 20px;
            background-color: #f4f4f4;
            color: #333;
        }
        h1, h2 {
            color: #4CAF50;
        }
        textarea {
            width: 100%;
            height: 150px;
            border: 1px solid #ccc;
            border-radius: 5px;
            padding: 10px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            resize: none;
            font-family: monospace;
        }
        pre {
            background-color: #eaeaea;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            overflow-x: auto;
            white-space: pre-wrap;
            word-wrap: break-word;
        }
        button {
            padding: 10px 15px;
            background-color: #008CBA;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 16px;
            transition: background-color 0.3s;
        }
        button:hover {
            background-color: #005f73;
        }
        #copyButton {
            background-color: #4CAF50;
        }
        #copyButton:hover {
            background-color: #388E3C;
        }
        #outputContainer {
            margin-top: 20px;
        }
    </style>
</head>
<body>
    <h1>JSON to Objective-C Generator</h1>
    
    <h2>Select JSON Format</h2>
    <select id="jsonFormat">
        <option value="tennis">ÁΩëÁêÉ JSON Ê†ºÂºè</option>
        <option value="spider">ËúòËõõ JSON Ê†ºÂºè</option>
    </select>

    <h2>Input JSON Data</h2>
    <textarea id="jsonInput" placeholder='{"rules":[{"matchValue":"match1","value":"value1"},{"matchValue":"match2","value":"value2"}]}'></textarea>
    <button id="generateButton">Generate Objective-C Code</button>
    
    <div id="outputContainer">
        <h2>Generated Objective-C Code</h2>
        <pre id="objcOutput"></pre>
        <button id="copyButton">Copy to Clipboard</button>
    </div>

    <script>
        document.getElementById('generateButton').addEventListener('click', function() {
            const jsonInput = document.getElementById('jsonInput').value;
            const jsonFormat = document.getElementById('jsonFormat').value;

            try {
                const data = JSON.parse(jsonInput);
                const patterns = [];
                const replacements = [];

                if (jsonFormat === 'tennis') {
                    if (data.rules) {
                        data.rules.forEach(rule => {
                            patterns.push(rule.matchValue);
                            replacements.push(rule.value);
                        });
                    }
                } else if (jsonFormat === 'spider') {
                    if (data.pathes) {
                        data.pathes.forEach(path => {
                            path.rules.forEach(rule => {
                                patterns.push(rule.key);
                                replacements.push(rule.value);
                            });
                        });
                    }
                }

                const objcCode = `
#import <UIKit/UIKit.h>
#import <objc/runtime.h>
#import <Foundation/Foundation.h>

%hook NSJSONSerialization

+ (id)JSONObjectWithData:(NSData *)data options:(NSJSONReadingOptions)opt error:(NSError **)error {
    NSString *jsonString = [[NSString alloc] initWithData:data encoding:NSUTF8StringEncoding];

    if (jsonString) {
        NSArray *patterns = @[
            ${patterns.map(pattern => `"${pattern}"`).join(', ')}
        ];

        NSArray *replacements = @[
            ${replacements.map(replacement => `"${replacement}"`).join(', ')}
        ];

        for (NSInteger i = 0; i < patterns.count; i++) {
            jsonString = [jsonString stringByReplacingOccurrencesOfString:patterns[i] withString:replacements[i] options:NSRegularExpressionSearch range:NSMakeRange(0, jsonString.length)];
        }
        
        data = [jsonString dataUsingEncoding:NSUTF8StringEncoding];
    }

    return %orig(data, opt, error);
}}

%end
                `.trim();

                document.getElementById('objcOutput').textContent = objcCode;
            } catch (e) {
                document.getElementById('objcOutput').textContent = 'Error parsing JSON: ' + e.message;
            }
        });

        document.getElementById('copyButton').addEventListener('click', function() {
            const output = document.getElementById('objcOutput');
            const range = document.createRange();
            range.selectNode(output);
            window.getSelection().removeAllRanges(); 
            window.getSelection().addRange(range); 
            document.execCommand('copy');
            window.getSelection().removeAllRanges(); 
            alert("Copied to clipboard! üìã");
        });
    </script>
</body>
</html>
